{"version":3,"file":"grader.min.js","sources":["../../src/grades/grader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_forum/grades/grader\n * @package    mod_forum\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Selectors from './grader/selectors';\nimport Repository from 'mod_forum/repository';\nimport Templates from 'core/templates';\nimport * as Grader from '../local/grades/grader';\nimport Notification from 'core/notification';\nimport CourseRepository from 'core_course/repository';\nimport {relativeUrl} from 'core/url';\n\nconst templateNames = {\n    contentRegion: 'mod_forum/grades/grader/discussion/posts',\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch a users content.\n *\n * @param {Number} cmid\n * @param {Bool} experimentalDisplayMode\n * @return {Function}\n */\nconst getContentForUserIdFunction = (cmid, experimentalDisplayMode) => (userid) => {\n    /**\n     * Given the parent function is called with the second param set execute the partially executed function.\n     *\n     * @param {Number} userid\n     */\n    return Repository.getDiscussionByUserID(userid, cmid)\n        .then(context => {\n            // Rebuild the returned data for the template.\n            context.discussions = context.discussions.map(discussionPostMapper);\n            context.experimentaldisplaymode = experimentalDisplayMode ? true : false;\n\n            return Templates.render(templateNames.contentRegion, context);\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch users call.\n * The function curried fetches all users in a course for a given CMID.\n *\n * @param {Number} cmid\n * @param {Number} groupID\n * @return {Array} Array of users for a given context.\n */\nconst getUsersForCmidFunction = (cmid, groupID) => async() => {\n    const context = await CourseRepository.getUsersFromCourseModuleID(cmid, groupID);\n\n    return context.users;\n};\n\n\nconst findGradableNode = node => node.closest(Selectors.gradableItem);\n\n/**\n * For a discussion we need to manipulate it's posts to hide certain UI elements.\n *\n * @param {Object} discussion\n * @return {Array} name, id, posts\n */\nconst discussionPostMapper = (discussion) => {\n    // Map postid => post.\n    const parentMap = new Map();\n    discussion.posts.parentposts.forEach(post => parentMap.set(post.id, post));\n    const userPosts = discussion.posts.userposts.map(post => {\n        post.readonly = true;\n        post.hasreplies = false;\n        post.replies = [];\n\n        const parent = post.parentid ? parentMap.get(post.parentid) : null;\n        if (parent) {\n            parent.hasreplies = false;\n            parent.replies = [];\n            parent.readonly = true;\n            post.parentauthorname = parent.author.fullname;\n        }\n\n        return {\n            parent,\n            post\n        };\n    });\n\n    return {\n        ...discussion,\n        posts: userPosts,\n    };\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n */\nconst launchWholeForumGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_forum',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    const groupID = data.group ? data.group : 0;\n\n    await Grader.launch(\n        getUsersForCmidFunction(data.cmid, groupID),\n        getContentForUserIdFunction(data.cmid, data.experimentalDisplayMode == \"1\"),\n        gradingPanelFunctions.getter,\n        gradingPanelFunctions.setter,\n        {\n            groupid: data.groupid,\n            initialUserId: data.initialuserid,\n            moduleName: data.name,\n            courseName: data.courseName,\n            courseUrl: relativeUrl('/course/view.php', {id: data.courseId}),\n            sendStudentNotifications: data.sendStudentNotifications,\n            focusOnClose,\n        }\n    );\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n */\nconst launchViewGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_forum',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    await Grader.view(\n        gradingPanelFunctions.getter,\n        data.userid,\n        data.name,\n        {\n            focusOnClose,\n        }\n    );\n};\n\n/**\n * Register listeners to launch the grading panel.\n */\nexport const registerLaunchListeners = () => {\n    document.addEventListener('click', async(e) => {\n        if (e.target.matches(Selectors.launch)) {\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchWholeForumGrading(rootNode, {\n                        focusOnClose: e.target,\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n        if (e.target.matches(Selectors.viewGrade)) {\n            e.preventDefault();\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchViewGrading(rootNode, {\n                        focusOnClose: e.target,\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n    });\n};\n"],"names":["Selectors","_interopRequireWildcard","_repository","_interopRequireDefault","_templates","Grader","_notification","_repository2","_ref2","_ref4","templateNames","getContentForUserIdFunction","cmid","experimentalDisplayMode","userid","Repository","getDiscussionByUserID","then","context","Templates","discussions","map","discussionPostMapper","experimentaldisplaymode","render","catch","Notification","exception","getUsersForCmidFunction","groupID","_asyncToGenerator","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","CourseRepository","getUsersFromCourseModuleID","sent","users","stop","findGradableNode","node","closest","gradableItem","discussion","parentMap","Map","posts","parentposts","forEach","post","set","id","userPosts","userposts","readonly","hasreplies","replies","parent","parentid","get","parentauthorname","author","fullname","_objectSpread","launchWholeForumGrading","rootNode","_ref3$focusOnClose","focusOnClose","data","gradingPanelFunctions","_args2","arguments","_context2","length","undefined","dataset","getGradingPanelFunctions","contextid","gradingComponent","gradingComponentSubtype","gradableItemtype","group","launch","getter","setter","groupid","initialUserId","initialuserid","moduleName","name","courseName","courseUrl","_url","relativeUrl","courseId","sendStudentNotifications","_callee2","_x","apply","this","launchViewGrading","_ref5$focusOnClose","_args3","_context3","view","_callee3","_x2","_ref6","document","addEventListener","e","_rootNode","_context4","target","matches","Error","gradableItems","wholeForum","preventDefault","t0","viewGrade","t1","_callee4","_x3"],"mappings":"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"}