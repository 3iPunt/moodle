{"version":3,"file":"view.min.js","sources":["../src/view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the courses view for the overview block.\n *\n * @package    block_myoverview\n * @copyright  2018 Bas Brands <bas@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n[\n    'jquery',\n    'block_myoverview/repository',\n    'core/paged_content_factory',\n    'core/pubsub',\n    'core/custom_interaction_events',\n    'core/notification',\n    'core/templates',\n    'core_course/events',\n    'block_myoverview/selectors',\n    'core/paged_content_events',\n],\nfunction(\n    $,\n    Repository,\n    PagedContentFactory,\n    PubSub,\n    CustomEvents,\n    Notification,\n    Templates,\n    CourseEvents,\n    Selectors,\n    PagedContentEvents\n) {\n\n    var SELECTORS = {\n        COURSE_REGION: '[data-region=\"course-view-content\"]',\n        ACTION_HIDE_COURSE: '[data-action=\"hide-course\"]',\n        ACTION_SHOW_COURSE: '[data-action=\"show-course\"]',\n        ACTION_ADD_FAVOURITE: '[data-action=\"add-favourite\"]',\n        ACTION_REMOVE_FAVOURITE: '[data-action=\"remove-favourite\"]',\n        FAVOURITE_ICON: '[data-region=\"favourite-icon\"]',\n        ICON_IS_FAVOURITE: '[data-region=\"is-favourite\"]',\n        ICON_NOT_FAVOURITE: '[data-region=\"not-favourite\"]',\n        PAGED_CONTENT_CONTAINER: '[data-region=\"page-container\"]'\n\n    };\n\n    var TEMPLATES = {\n        COURSES_CARDS: 'block_myoverview/view-cards',\n        COURSES_LIST: 'block_myoverview/view-list',\n        COURSES_SUMMARY: 'block_myoverview/view-summary',\n        NOCOURSES: 'core_course/no-courses'\n    };\n\n    var GROUPINGS = {\n        GROUPING_ALLINCLUDINGHIDDEN: 'allincludinghidden',\n        GROUPING_ALL: 'all',\n        GROUPING_INPROGRESS: 'inprogress',\n        GROUPING_FUTURE: 'future',\n        GROUPING_PAST: 'past',\n        GROUPING_FAVOURITES: 'favourites',\n        GROUPING_HIDDEN: 'hidden'\n    };\n\n    var NUMCOURSES_PERPAGE = [12, 24, 48, 96, 0];\n\n    var loadedPages = [];\n\n    var courseOffset = 0;\n\n    var lastPage = 0;\n\n    var lastLimit = 0;\n\n    var namespace = null;\n\n    /**\n     * Get filter values from DOM.\n     *\n     * @param {object} root The root element for the courses view.\n     * @return {filters} Set filters.\n     */\n    var getFilterValues = function(root) {\n        var courseRegion = root.find(Selectors.courseView.region);\n        return {\n            display: courseRegion.attr('data-display'),\n            grouping: courseRegion.attr('data-grouping'),\n            sort: courseRegion.attr('data-sort'),\n            displaycategories: courseRegion.attr('data-displaycategories'),\n            customfieldname: courseRegion.attr('data-customfieldname'),\n            customfieldvalue: courseRegion.attr('data-customfieldvalue'),\n        };\n    };\n\n    // We want the paged content controls below the paged content area.\n    // and the controls should be ignored while data is loading.\n    var DEFAULT_PAGED_CONTENT_CONFIG = {\n        ignoreControlWhileLoading: true,\n        controlPlacementBottom: true,\n        persistentLimitKey: 'block_myoverview_user_paging_preference'\n    };\n\n    /**\n     * Get enrolled courses from backend.\n     *\n     * @param {object} filters The filters for this view.\n     * @param {int} limit The number of courses to show.\n     * @return {promise} Resolved with an array of courses.\n     */\n    var getMyCourses = function(filters, limit) {\n\n        return Repository.getEnrolledCoursesByTimeline({\n            offset: courseOffset,\n            limit: limit,\n            classification: filters.grouping,\n            sort: filters.sort,\n            customfieldname: filters.customfieldname,\n            customfieldvalue: filters.customfieldvalue\n        });\n    };\n\n    /**\n     * Get the container element for the favourite icon.\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     * @return {Object} The favourite icon container\n     */\n    var getFavouriteIconContainer = function(root, courseId) {\n        return root.find(SELECTORS.FAVOURITE_ICON + '[data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Get the paged content container element.\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} index Rendered page index.\n     * @return {Object} The rendered paged container.\n     */\n    var getPagedContentContainer = function(root, index) {\n        return root.find('[data-region=\"paged-content-page\"][data-page=\"' + index + '\"]');\n    };\n\n    /**\n     * Get the course id from a favourite element.\n     *\n     * @param {Object} root The favourite icon container element.\n     * @return {Number} Course id.\n     */\n    var getCourseId = function(root) {\n        return root.attr('data-course-id');\n    };\n\n    /**\n     * Hide the favourite icon.\n     *\n     * @param {Object} root The favourite icon container element.\n     * @param  {Number} courseId Course id number.\n     */\n    var hideFavouriteIcon = function(root, courseId) {\n        var iconContainer = getFavouriteIconContainer(root, courseId);\n        var isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n        isFavouriteIcon.addClass('hidden');\n        isFavouriteIcon.attr('aria-hidden', true);\n        var notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n        notFavourteIcon.removeClass('hidden');\n        notFavourteIcon.attr('aria-hidden', false);\n    };\n\n    /**\n     * Show the favourite icon.\n     *\n     * @param  {Object} root The course overview container.\n     * @param  {Number} courseId Course id number.\n     */\n    var showFavouriteIcon = function(root, courseId) {\n        var iconContainer = getFavouriteIconContainer(root, courseId);\n        var isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n        isFavouriteIcon.removeClass('hidden');\n        isFavouriteIcon.attr('aria-hidden', false);\n        var notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n        notFavourteIcon.addClass('hidden');\n        notFavourteIcon.attr('aria-hidden', true);\n    };\n\n    /**\n     * Get the action menu item\n     *\n     * @param {Object} root  root The course overview container\n     * @param {Number} courseId Course id.\n     * @return {Object} The add to favourite menu item.\n     */\n    var getAddFavouriteMenuItem = function(root, courseId) {\n        return root.find('[data-action=\"add-favourite\"][data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Get the action menu item\n     *\n     * @param {Object} root  root The course overview container\n     * @param {Number} courseId Course id.\n     * @return {Object} The remove from favourites menu item.\n     */\n    var getRemoveFavouriteMenuItem = function(root, courseId) {\n        return root.find('[data-action=\"remove-favourite\"][data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Add course to favourites\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     */\n    var addToFavourites = function(root, courseId) {\n        var removeAction = getRemoveFavouriteMenuItem(root, courseId);\n        var addAction = getAddFavouriteMenuItem(root, courseId);\n\n        setCourseFavouriteState(courseId, true).then(function(success) {\n            if (success) {\n                PubSub.publish(CourseEvents.favourited, courseId);\n                removeAction.removeClass('hidden');\n                addAction.addClass('hidden');\n                showFavouriteIcon(root, courseId);\n            } else {\n                Notification.alert('Starring course failed', 'Could not change favourite state');\n            }\n            return;\n        }).catch(Notification.exception);\n    };\n\n    /**\n     * Remove course from favourites\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     */\n    var removeFromFavourites = function(root, courseId) {\n        var removeAction = getRemoveFavouriteMenuItem(root, courseId);\n        var addAction = getAddFavouriteMenuItem(root, courseId);\n\n        setCourseFavouriteState(courseId, false).then(function(success) {\n            if (success) {\n                PubSub.publish(CourseEvents.unfavorited, courseId);\n                removeAction.addClass('hidden');\n                addAction.removeClass('hidden');\n                hideFavouriteIcon(root, courseId);\n            } else {\n                Notification.alert('Starring course failed', 'Could not change favourite state');\n            }\n            return;\n        }).catch(Notification.exception);\n    };\n\n    /**\n     * Get the action menu item\n     *\n     * @param {Object} root  root The course overview container\n     * @param {Number} courseId Course id.\n     * @return {Object} The hide course menu item.\n     */\n    var getHideCourseMenuItem = function(root, courseId) {\n        return root.find('[data-action=\"hide-course\"][data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Get the action menu item\n     *\n     * @param {Object} root  root The course overview container\n     * @param {Number} courseId Course id.\n     * @return {Object} The show course menu item.\n     */\n    var getShowCourseMenuItem = function(root, courseId) {\n        return root.find('[data-action=\"show-course\"][data-course-id=\"' + courseId + '\"]');\n    };\n\n    /**\n     * Hide course\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     */\n    var hideCourse = function(root, courseId) {\n        var hideAction = getHideCourseMenuItem(root, courseId);\n        var showAction = getShowCourseMenuItem(root, courseId);\n        var filters = getFilterValues(root);\n\n        setCourseHiddenState(courseId, true);\n\n        // Remove the course from this view as it is now hidden and thus not covered by this view anymore.\n        // Do only if we are not in \"All\" view mode where really all courses are shown.\n        if (filters.grouping != GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n            hideElement(root, courseId);\n        }\n\n        hideAction.addClass('hidden');\n        showAction.removeClass('hidden');\n    };\n\n    /**\n     * Show course\n     *\n     * @param  {Object} root The course overview container\n     * @param  {Number} courseId Course id number\n     */\n    var showCourse = function(root, courseId) {\n        var hideAction = getHideCourseMenuItem(root, courseId);\n        var showAction = getShowCourseMenuItem(root, courseId);\n        var filters = getFilterValues(root);\n\n        setCourseHiddenState(courseId, null);\n\n        // Remove the course from this view as it is now shown again and thus not covered by this view anymore.\n        // Do only if we are not in \"All\" view mode where really all courses are shown.\n        if (filters.grouping != GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n            hideElement(root, courseId);\n        }\n\n        hideAction.removeClass('hidden');\n        showAction.addClass('hidden');\n    };\n\n    /**\n     * Set the courses hidden status and push to repository\n     *\n     * @param  {Number} courseId Course id to favourite.\n     * @param  {Bool} status new hidden status.\n     * @return {Promise} Repository promise.\n     */\n    var setCourseHiddenState = function(courseId, status) {\n\n        // If the given status is not hidden, the preference has to be deleted with a null value.\n        if (status === false) {\n            status = null;\n        }\n        return Repository.updateUserPreferences({\n            preferences: [\n                {\n                    type: 'block_myoverview_hidden_course_' + courseId,\n                    value: status\n                }\n            ]\n        });\n    };\n\n    /**\n     * Reset the loadedPages dataset to take into account the hidden element\n     *\n     * @param {Object} root The course overview container\n     * @param {Number} id The course id number\n     */\n    var hideElement = function(root, id) {\n        var pagingBar = root.find('[data-region=\"paging-bar\"]');\n        var jumpto = parseInt(pagingBar.attr('data-active-page-number'));\n\n        // Get a reduced dataset for the current page.\n        var courseList = loadedPages[jumpto];\n        var reducedCourse = courseList.courses.reduce(function(accumulator, current) {\n            if (id != current.id) {\n                accumulator.push(current);\n            }\n            return accumulator;\n        }, []);\n\n        // Get the next page's data if loaded and pop the first element from it\n        if (loadedPages[jumpto + 1] != undefined) {\n            var newElement = loadedPages[jumpto + 1].courses.slice(0, 1);\n\n            // Adjust the dataset for the reset of the pages that are loaded\n            loadedPages.forEach(function(courseList, index) {\n                if (index > jumpto) {\n                    var popElement = [];\n                    if (loadedPages[index + 1] != undefined) {\n                        popElement = loadedPages[index + 1].courses.slice(0, 1);\n                    }\n\n                    loadedPages[index].courses = $.merge(loadedPages[index].courses.slice(1), popElement);\n                }\n            });\n\n\n            reducedCourse = $.merge(reducedCourse, newElement);\n        }\n\n        // Check if the next page is the last page and if it still has data associated to it\n        if (lastPage == jumpto + 1 && loadedPages[jumpto + 1].courses.length == 0) {\n            var pagedContentContainer = root.find('[data-region=\"paged-content-container\"]');\n            PagedContentFactory.resetLastPageNumber($(pagedContentContainer).attr('id'), jumpto);\n        }\n\n        loadedPages[jumpto].courses = reducedCourse;\n\n        // Reduce the course offset\n        courseOffset--;\n\n        // Render the paged content for the current\n        var pagedContentPage = getPagedContentContainer(root, jumpto);\n        renderCourses(root, loadedPages[jumpto]).then(function(html, js) {\n            return Templates.replaceNodeContents(pagedContentPage, html, js);\n        }).catch(Notification.exception);\n\n        // Delete subsequent pages in order to trigger the callback\n        loadedPages.forEach(function(courseList, index) {\n            if (index > jumpto) {\n                var page = getPagedContentContainer(root, index);\n                page.remove();\n            }\n        });\n    };\n\n    /**\n     * Set the courses favourite status and push to repository\n     *\n     * @param  {Number} courseId Course id to favourite.\n     * @param  {Bool} status new favourite status.\n     * @return {Promise} Repository promise.\n     */\n    var setCourseFavouriteState = function(courseId, status) {\n\n        return Repository.setFavouriteCourses({\n            courses: [\n                    {\n                        'id': courseId,\n                        'favourite': status\n                    }\n                ]\n        }).then(function(result) {\n            if (result.warnings.length == 0) {\n                loadedPages.forEach(function(courseList) {\n                    courseList.courses.forEach(function(course, index) {\n                        if (course.id == courseId) {\n                            courseList.courses[index].isfavourite = status;\n                        }\n                    });\n                });\n                return true;\n            } else {\n                return false;\n            }\n        }).catch(Notification.exception);\n    };\n\n    /**\n     * Render the dashboard courses.\n     *\n     * @param {object} root The root element for the courses view.\n     * @param {array} coursesData containing array of returned courses.\n     * @return {promise} jQuery promise resolved after rendering is complete.\n     */\n    var renderCourses = function(root, coursesData) {\n\n        var filters = getFilterValues(root);\n\n        var currentTemplate = '';\n        if (filters.display == 'card') {\n            currentTemplate = TEMPLATES.COURSES_CARDS;\n        } else if (filters.display == 'list') {\n            currentTemplate = TEMPLATES.COURSES_LIST;\n        } else {\n            currentTemplate = TEMPLATES.COURSES_SUMMARY;\n        }\n\n        // Whether the course category should be displayed in the course item.\n        coursesData.courses = coursesData.courses.map(function(course) {\n            course.showcoursecategory = filters.displaycategories == 'on' ? true : false;\n            return course;\n        });\n\n        if (coursesData.courses.length) {\n            return Templates.render(currentTemplate, {\n                courses: coursesData.courses,\n            });\n        } else {\n            var nocoursesimg = root.find(Selectors.courseView.region).attr('data-nocoursesimg');\n            return Templates.render(TEMPLATES.NOCOURSES, {\n                nocoursesimg: nocoursesimg\n            });\n        }\n    };\n\n    /**\n     * Return the callback to be passed to the subscribe event\n     *\n     * @param {Number} limit The paged limit that is passed through the event\n     */\n    var setLimit = function(limit) {\n        this.find(Selectors.courseView.region).attr('data-paging', limit);\n    };\n\n    /**\n     * Intialise the paged list and cards views on page load.\n     * Returns an array of paged contents that we would like to handle here\n     *\n     * @param {object} root The root element for the courses view\n     * @param {string} namespace The namespace for all the events attached\n     */\n    var registerPagedEventHandlers = function(root, namespace) {\n        var event = namespace + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT;\n        PubSub.subscribe(event, setLimit.bind(root));\n    };\n\n    /**\n     * Intialise the courses list and cards views on page load.\n     *\n     * @param {object} root The root element for the courses view.\n     * @param {object} content The content element for the courses view.\n     */\n    var initializePagedContent = function(root) {\n        namespace = \"block_myoverview_\" + root.attr('id') + \"_\" + Math.random();\n\n        var pagingLimit = parseInt(root.find(Selectors.courseView.region).attr('data-paging'), 10);\n        var itemsPerPage = NUMCOURSES_PERPAGE.map(function(value) {\n            var active = false;\n            if (value == pagingLimit) {\n                active = true;\n            }\n\n            return {\n                value: value,\n                active: active\n            };\n        });\n\n        // Filter out all pagination options which are too large for the amount of courses user is enrolled in.\n        var totalCourseCount = parseInt(root.find(Selectors.courseView.region).attr('data-totalcoursecount'), 10);\n        itemsPerPage = itemsPerPage.filter(function(pagingOption) {\n            return pagingOption.value < totalCourseCount || pagingOption.value === 0;\n        });\n\n        var filters = getFilterValues(root);\n        var config = $.extend({}, DEFAULT_PAGED_CONTENT_CONFIG);\n        config.eventNamespace = namespace;\n\n        var pagedContentPromise = PagedContentFactory.createWithLimit(\n            itemsPerPage,\n            function(pagesData, actions) {\n                var promises = [];\n\n                pagesData.forEach(function(pageData) {\n                    var currentPage = pageData.pageNumber;\n                    var limit = (pageData.limit > 0) ? pageData.limit : 0;\n\n                    // Reset local variables if limits have changed\n                    if (lastLimit != limit) {\n                        loadedPages = [];\n                        courseOffset = 0;\n                        lastPage = 0;\n                    }\n\n                    if (lastPage == currentPage) {\n                        // If we are on the last page and have it's data then load it from cache\n                        actions.allItemsLoaded(lastPage);\n                        promises.push(renderCourses(root, loadedPages[currentPage]));\n                        return;\n                    }\n\n                    lastLimit = limit;\n\n                    // Get 2 pages worth of data as we will need it for the hidden functionality.\n                    if (loadedPages[currentPage + 1] == undefined) {\n                        if (loadedPages[currentPage] == undefined) {\n                            limit *= 2;\n                        }\n                    }\n\n                    var pagePromise = getMyCourses(\n                        filters,\n                        limit\n                    ).then(function(coursesData) {\n                        var courses = coursesData.courses;\n                        var nextPageStart = 0;\n                        var pageCourses = [];\n\n                        // If current page's data is loaded make sure we max it to page limit\n                        if (loadedPages[currentPage] != undefined) {\n                            pageCourses = loadedPages[currentPage].courses;\n                            var currentPageLength = pageCourses.length;\n                            if (currentPageLength < pageData.limit) {\n                                nextPageStart = pageData.limit - currentPageLength;\n                                pageCourses = $.merge(loadedPages[currentPage].courses, courses.slice(0, nextPageStart));\n                            }\n                        } else {\n                            // When the page limit is zero, there is only one page of courses, no start for next page.\n                            nextPageStart = pageData.limit || false;\n                            pageCourses = (pageData.limit > 0) ? courses.slice(0, pageData.limit) : courses;\n                        }\n\n                        // Finished setting up the current page\n                        loadedPages[currentPage] = {\n                            courses: pageCourses\n                        };\n\n                        // Set up the next page (if there is more than one page).\n                        var remainingCourses = nextPageStart !== false ? courses.slice(nextPageStart, courses.length) : [];\n                        if (remainingCourses.length) {\n                            loadedPages[currentPage + 1] = {\n                                courses: remainingCourses\n                            };\n                        }\n\n                        // Set the last page to either the current or next page\n                        if (loadedPages[currentPage].courses.length < pageData.limit || !remainingCourses.length) {\n                            lastPage = currentPage;\n                            actions.allItemsLoaded(currentPage);\n                        } else if (loadedPages[currentPage + 1] != undefined\n                            && loadedPages[currentPage + 1].courses.length < pageData.limit) {\n                            lastPage = currentPage + 1;\n                        }\n\n                        courseOffset = coursesData.nextoffset;\n                        return renderCourses(root, loadedPages[currentPage]);\n                    })\n                    .catch(Notification.exception);\n\n                    promises.push(pagePromise);\n                });\n\n                return promises;\n            },\n            config\n        );\n\n        pagedContentPromise.then(function(html, js) {\n            registerPagedEventHandlers(root, namespace);\n            return Templates.replaceNodeContents(root.find(Selectors.courseView.region), html, js);\n        }).catch(Notification.exception);\n    };\n\n    /**\n     * Listen to, and handle events for  the myoverview block.\n     *\n     * @param {Object} root The myoverview block container element.\n     */\n    var registerEventListeners = function(root) {\n        CustomEvents.define(root, [\n            CustomEvents.events.activate\n        ]);\n\n        root.on(CustomEvents.events.activate, SELECTORS.ACTION_ADD_FAVOURITE, function(e, data) {\n            var favourite = $(e.target).closest(SELECTORS.ACTION_ADD_FAVOURITE);\n            var courseId = getCourseId(favourite);\n            addToFavourites(root, courseId);\n            data.originalEvent.preventDefault();\n        });\n\n        root.on(CustomEvents.events.activate, SELECTORS.ACTION_REMOVE_FAVOURITE, function(e, data) {\n            var favourite = $(e.target).closest(SELECTORS.ACTION_REMOVE_FAVOURITE);\n            var courseId = getCourseId(favourite);\n            removeFromFavourites(root, courseId);\n            data.originalEvent.preventDefault();\n        });\n\n        root.on(CustomEvents.events.activate, SELECTORS.FAVOURITE_ICON, function(e, data) {\n            data.originalEvent.preventDefault();\n        });\n\n        root.on(CustomEvents.events.activate, SELECTORS.ACTION_HIDE_COURSE, function(e, data) {\n            var target = $(e.target).closest(SELECTORS.ACTION_HIDE_COURSE);\n            var courseId = getCourseId(target);\n            hideCourse(root, courseId);\n            data.originalEvent.preventDefault();\n        });\n\n        root.on(CustomEvents.events.activate, SELECTORS.ACTION_SHOW_COURSE, function(e, data) {\n            var target = $(e.target).closest(SELECTORS.ACTION_SHOW_COURSE);\n            var courseId = getCourseId(target);\n            showCourse(root, courseId);\n            data.originalEvent.preventDefault();\n        });\n    };\n\n    /**\n     * Intialise the courses list and cards views on page load.\n     *\n     * @param {object} root The root element for the courses view.\n     */\n    var init = function(root) {\n        root = $(root);\n        loadedPages = [];\n        lastPage = 0;\n        courseOffset = 0;\n\n        initializePagedContent(root);\n\n        if (!root.attr('data-init')) {\n            registerEventListeners(root);\n            root.attr('data-init', true);\n        }\n    };\n\n    /**\n\n     * Reset the courses views to their original\n     * state on first page load.courseOffset\n     *\n     * This is called when configuration has changed for the event lists\n     * to cause them to reload their data.\n     *\n     * @param {Object} root The root element for the timeline view.\n     */\n    var reset = function(root) {\n        if (loadedPages.length > 0) {\n            loadedPages.forEach(function(courseList, index) {\n                var pagedContentPage = getPagedContentContainer(root, index);\n                renderCourses(root, courseList).then(function(html, js) {\n                    return Templates.replaceNodeContents(pagedContentPage, html, js);\n                }).catch(Notification.exception);\n            });\n        } else {\n            init(root);\n        }\n    };\n\n    return {\n        init: init,\n        reset: reset\n    };\n});\n"],"names":["define","$","Repository","PagedContentFactory","PubSub","CustomEvents","Notification","Templates","CourseEvents","Selectors","PagedContentEvents","SELECTORS","TEMPLATES","GROUPINGS","NUMCOURSES_PERPAGE","loadedPages","courseOffset","lastPage","lastLimit","namespace","getFilterValues","root","courseRegion","find","courseView","region","display","attr","grouping","sort","displaycategories","customfieldname","customfieldvalue","DEFAULT_PAGED_CONTENT_CONFIG","ignoreControlWhileLoading","controlPlacementBottom","persistentLimitKey","getFavouriteIconContainer","courseId","getPagedContentContainer","index","getCourseId","getAddFavouriteMenuItem","getRemoveFavouriteMenuItem","addToFavourites","removeAction","addAction","setCourseFavouriteState","then","success","publish","favourited","removeClass","addClass","iconContainer","isFavouriteIcon","notFavourteIcon","showFavouriteIcon","alert","catch","exception","removeFromFavourites","unfavorited","hideFavouriteIcon","getHideCourseMenuItem","getShowCourseMenuItem","setCourseHiddenState","status","updateUserPreferences","preferences","type","value","hideElement","id","pagingBar","jumpto","parseInt","reducedCourse","courses","reduce","accumulator","current","push","undefined","newElement","slice","forEach","courseList","popElement","merge","length","pagedContentContainer","resetLastPageNumber","pagedContentPage","renderCourses","html","js","replaceNodeContents","remove","setFavouriteCourses","result","warnings","course","isfavourite","coursesData","filters","currentTemplate","map","showcoursecategory","render","nocoursesimg","setLimit","limit","this","registerPagedEventHandlers","event","SET_ITEMS_PER_PAGE_LIMIT","subscribe","bind","initializePagedContent","Math","random","pagingLimit","itemsPerPage","active","totalCourseCount","filter","pagingOption","config","extend","eventNamespace","pagedContentPromise","createWithLimit","pagesData","actions","promises","pageData","currentPage","pageNumber","allItemsLoaded","pagePromise","getEnrolledCoursesByTimeline","offset","classification","getMyCourses","nextPageStart","pageCourses","currentPageLength","remainingCourses","nextoffset","registerEventListeners","events","activate","on","e","data","favourite","target","closest","originalEvent","preventDefault","hideAction","showAction","hideCourse","showCourse","init","reset"],"mappings":"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"}